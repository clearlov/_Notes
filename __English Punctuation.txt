/* 
 * add a backtick ` to indicate the importance
 * [ Ctrl+x ] both click Ctrl and x
 * [ :! or :~! ] input ! after inputing :
 * n[] or n~[]  normally n is a number
 * n * []  n times inputs, e.g. 3 * [ > ]  is [ >>> ]
 * [?] it's an option, normally the selection will list below
 * [?=memcheck]  it's an optioin, the default value is memcheck
 * [?=\^preg]  \d+  
 * [ A ?> B ?> C ]     if A return A; elseif B return B; elseif C return C;
 * <UPPER_CASE> it's a parameter
 */

|~ Commentory ~|

->> concur:  returns ->> by-product
	e.g. var arr=[1,2,3]; arr.pop();  // 3 ->> arr = [1,2]

|~ range ~|
[1,99]  	==>  1 <= x <= 99
[1,]     	==>  1 <= x
[1,50,99]   ==>  1 <= x <=99, 	  suggest x = 50
[1,50+,99]   ==>  1 <= x <=99, 	  suggest x = 50+
[,1+,99]		==>  MIN <  x <= 99,  MIN < 1, and suggest MIN = 1+
[1,99,]		==>  1 <= x < MAX,    MAX >99, and suggest MAX = 99

|~ Mathematical Symbols ~|

logarithms  a^b=n  log_a(n) = b
lb(n) = log_2(n)
ln(n) = log_e(n)
lg(n) = log_10(n)
∑ (Sigma)
	[n]∑[i=1](1/i) = 1 + 1/2 + 1/3 ... 1/n
	[n+1]∑[i=i](n-i+1) = n + (n-1) + (n-2) ... 0
Etime = [n+1]∑[i=i]p(i)(n-i+1)
|- Asymptotic Notation -|
O() : Big O Notation : e.g. n/2  2*n  100*n+200  ==> O(n)
Θ() : Theta Notation
Ω() : Big Omega Notation


|- sets -|
∈ : belong to; is set of

|~ Shorts ~|
ioo   is out of 


`  backquote/backtick
>> right shift
~  tilde
!  exclamation point
-- dash
-  hyphen
.  period / dot / full stop
, comma
# pound
...   dots/ellipsis
&  ampersand
/  slash
// slash-slash / comment
\  backslash
: colon
;  semicolon
?  question mark
'  apostrophe

|  vertical bar / vertical virgule

[]  square brackets
[  open bracket
]  close bracket
()  parentheses
(  open paren / open parenthesis
)  close paren / close parenthesis
{}
{  open brace  / open curly
} close brace / close curly
