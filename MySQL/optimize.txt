sql> set profiling=1;
sql> SELECT * FROM tb;
sql> show profiles;
|[
+----------+------------+-------------------+
| Query_ID | Duration   | Query             |
+----------+------------+-------------------+
|        1 | 0.84718100 | select * from tb  |
+----------+------------+-------------------+
]|

|- Using LIMIT -|
/**
 *  http://explainextended.com/2009/10/23/mysql-order-by-limit-performance-late-row-lookups/
 */
sql> SELECT * FROM tb LIMIT 1000,10            	/* takes 5ms */
sql> SELECT * FROM tb LIMIT 900000,10        	/* takes 180ms */

sql> explain SELECT * FROM tb ORDER BY id DESC LIMIT 90000,10\G
|[
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: tb
         type: index
possible_keys: NULL
          key: PRIMARY
      key_len: 4
          ref: NULL
         rows: 900010         ------> E = [n]∑[o=1](o+row_count) * p(o) = O(n)
        Extra: NULL
1 row in set (0.00 sec)
]|

Take the last 900010 rows in id order and returns the first 10.
E = [n]∑[o=1](o+row_count) * p(o)
Known:
	row_count = [10,30] is a very tiny number
	n is an extremely huge number
Assume:
	p(o) = 1/n
Solve:
	E = (1+2*row_count + n)/2 
	  = n/2
	  = O(n)
Assume:
	[990]∑[o=1]p(o) = 99%, and p(o) = 0.1%
	[n]∑[o=991]p(o) = 1%, and p(o) = 1/(n-990) % = (1/n)%
Solve:
	E_l = (1+2*row_count+990)  *990/2   * 0.1%
		= 500
	E_g = (991 + 2*row_count + n)* (n-991)/2 * (1/n)%
		= (1000 + n) * (n-991) / (200*n)
		= 5 + n/200 - 5000/n - 5
		= n/200
	E 	= E_l + E_g
		= 500 + n/200
		= O(n)





sql> explain SELECT * FROM tb WHERE i>90000 ORDER BY id DESC LIMIT 10\G
|[
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: tb
         type: index
possible_keys: NULL
          key: PRIMARY
      key_len: 4
          ref: NULL
         rows:                      	----->
        Extra: NULL
1 row in set (0.00 sec)
]|