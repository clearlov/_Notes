|+ DINSTINCT and COUNT(DINSTINCT fld) +|
db> select distinct fld from tb;    /* dinstict */
db> select count(dinstinct fld) from tbl;
|+ EXISTS(bool) +|
db> select * from tb where exists (
        select * from tb where [CONSTRAINT]         
    )
|+ <ANY()  >ALL() +|
db> select * from tb where id<ANY(select id from tb);
db> select * from tb where id>ALL(select id from tb);

|~ JOIN ~|
|[
tb_a:
    id  1   2   3   4  5
    nm  V   I   N   C   E
tb_b:
    id  1   3   5   7
    nm  W   E   L   L
tb_c:
    id  0   2   4   6   8
    bid 1   3   5   7   9
    nm  M   A   R   G   E
]|
|+ (INNER) JOIN = intersection ∩ +|
/**
 * [USING(id)] is same as [ON tb_c.id = tb_a.id], but the list will show one id
 */
db> SELECT * FROM tb_c
     JOIN (tb_a) USING(id)              // tb_c ∩ tb_a = tb_c.id = 2,4
     JOIN (tb_b) ON (tb_c.bid = tb_b.id) // tb_c ∩ tb_a ∩ tb_b = tb_c.id = 0,2,4,6
     WHERE tb_c.id > 3;                 // tb_c.id = 4,6,8
|[
id  bid  nm  nm1  id1  nm2
4    5    R   C    5    L
]|
|+ CROSS JOIN +|
/**
 * Cartesian[kɑ:rˈti:ziən] Product: TB1xTB2
 */
db> SELECT flds FROM tb_a CROSS JOIN tb_b;  // 25 results


|+ LEFT (OUT) JOIN +|
/**
 * Base on left table(list it all), 
 */
db> SELECT * FROM tb_c
     LEFT JOIN tb_a USING(id)  // tb_c ∪ tb_a∈tb_c ∩ tb_a; tb_c ∪ tb_a.id = 2I,4C
     LEFT JOIN tb_b ON tb_c.bid = tb_b.id   // tb_c ∪ tb_b.id = 1W,3E,5L,7L
|[
id  bid  nm  nm1  id1  nm2
2    3    A    I    3    E
4    5    R    C    5    L
0    1    M         1    W
6    7    G         7    L
8    9    E            
]|     
|+ RIGHT (OUT) JOIN +|
