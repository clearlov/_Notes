|+ Dinstinct and count(dinstinct fld) +|
db> select distinct $fld from $tb;    /* dinstict */
db> select count(dinstinct $fld) from $tb;
|+ Exists(bool) +|
db> select * from $tb where exists (
        select * from $tb where $constraint        
    )
|+ <ANY()  >ALL() +|
db> select * from $tb where $id<ANY(select $id from $tb);
db> select * from $tb where $id>ALL(select $id from $tb);

|~ JOIN ~|
|[
tb1:
    id  1   2   3   4  5
    nm  V   I   N   C   E
tb2:
    id  1   3   5   7
    nm  W   E   L   L
tb3:
    id  0   2   4   6   8
    bid 1   3   5   7   9
    nm  M   A   R   G   E
]|
|+ (Inner) join = intersection ∩ +|
/**
 * [USING(id)] is same as [ON tb3.id = tb1.id], but the list will show one id
 */
db> SELECT * FROM tb3
     JOIN (tb1) USING(id)               // tb3 ∩ tb1 = tb3.id = 2,4
     JOIN (tb2) ON (tb3.bid = tb2.id)   // tb3 ∩ tb2 = tb3.id = 0,2,4,6
     WHERE tb3.id > 3;                  // tb3.id = 4,6,8
                                        // t3.id = 2,4 ∩ 0,2,4,6 ∩ 4,6,8 = 4
|[
id  bid  nm  nm1  id1  nm2
4    5    R   C    5    L
]|
|+ Cross join +|
/**
 * Cartesian[kɑ:rˈti:ziən] Product: TB1xTB2
 */
db> SELECT flds FROM tb1 CROSS JOIN tb2;  // 25 results


|+ Left (out) join +|
/**
 * Base on left table(list it all), 
 */
db> SELECT * FROM tb3
     LEFT JOIN tb1 USING(id)  // tb3 ∪ tb1∈tb3 ∩ tb1; tb3 ∪ tb1.id = 2I,4C
     LEFT JOIN tb2 ON tb3.bid = tb2.id   // tb3 ∪ tb2.id = 1W,3E,5L,7L
|[
id  bid  nm  nm1  id1  nm2
2    3    A    I    3    E
4    5    R    C    5    L
0    1    M         1    W
6    7    G         7    L
8    9    E            
]|     
|+ RIGHT (OUT) JOIN +|
