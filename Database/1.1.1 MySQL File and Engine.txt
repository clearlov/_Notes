db> show table status [like '$tb'] [\G]
db> alter table status $tb engine=MyISAM



|~ Character set ~|
_ci        char set insensible
_cs        char set sensible
_bin    compared with encoding

|+ +|
– character_set_client：客户端来源数据使用的字符集
– character_set_connection：连接层字符集
– character_set_server：默认的内部操作字符集
    PHP mysqli_set_charset ?>  
– character_set_database：当前选中数据库的默认字符集
– character_set_system：系统元数据(字段名等)字符集
– character_set_results：查询结果字符集

character_set_client   | -- character_set_connection --> 
|     [ CLIENT ]       |       [ MySQL SERVER ]        |
character_set_results  | <-- 

|+ +|
db> show character set;   /* SHOW COLLATION;  */
db> show variables like 'character%';
db> show variables like 'collation%';




master.info
master.info文件存在于Slave端的数据目录下，里面存放了该 Slave的Master端的
相关信息，包括Master的主机地址，连接用户，连接密码，连接端口，当前日志位置，已
经读取到的日志位置等信息。

2、relay log 和relay log index
mysql-relay-bin.xxxxxn 文件用于存放 Slave 端的 I/O线程从 Master 端所读取到
的 Binary Log 信息，然后由 Slave 端的 SQL 线程从该 relay log 中读取并解析相应的
日志信息，转化成 Master 所执行的 SQL 语句，然后在 Slave 端应用。
mysql-relay-bin.index 文件的功能类似于 mysql-bin.index ，同样是记录日志的存放位置的绝对路径，只不过他所记录的不是Binary Log，而是 Relay Log。

InnoDb
.idb
.ibdata
这两种文件都是存放Innodb数据的文件，之所以有两种文件来存放Innodb的数据（包
括索引） ， 是因为Innodb的数据存储方式能够通过配置来决定是使用共享表空间存放存储数
据，还是独享表空间存放存储数据。独享表空间存储方式使用“.ibd”文件来存放数据，且
每个表一个“.ibd”文件，文件存放在和MyISAM数据相同的位置。如果选用共享存储表空
间来存放数据，则会使用ibdata文件来存放，所有表共同使用一个（或者多个，可自行配
置）ibdata文件。ibdata文件可以通过innodb_data_home_dir和innodb_data_file_path
两个参数共同配置组成，innodb_data_home_dir 配置数据存放的总目录，而
innodb_data_file_path 配置每一个文件的名称。当然，也可以不配置
innodb_data_home_dir而直接在 innodb_data_file_path参数配置的时候使用绝对路径来
完成配置。innodb_data_file_path中可以一次配置多个ibdata文件。文件可以是指定大
小，也可以是自动扩展的，但是Innodb限制了仅仅只有最后一个ibdata文件能够配置成自
动扩展类型。 当我们需要添加新的ibdata文件的时候， 只能添加在innodb_data_file_path
配置的最后，而且必须重启MySQL才能完成ibdata的添加工作。不过如果我们使用独享表
空间存储方式的话， 就不会有这样的问题， 但是如果要使用裸设备的话， 每个表一个裸设备，
可能造成裸设备数量非常大，而且不太容易控制大小，实现比较困难，而共享表空间却不会
有这个问题，容易控制裸设备数量。我个人还是更倾向于使用独享表空间存储方式。当然，
两种方式各有利弊，看大家各自应用环境的侧重点在那里了。

MyISAM
.frm: meta
.MYD: data file
.MYI: index file