[J] "Just Enough Software Architecture - A Risk-Driven Approach"

[J1.1] Partitioning                                                         分治

Brooks' Law 1995
    为延期的项目增派人手会让它拖得更久
Conway's Law 1968
    任何设计系统的组织……必然会产生以下设计结果，即其结构就是该组织沟通结构的写照
    
[J3.1] Risk-Driven Model
(1) 识别风险，并排定优先级
    从两个维度：一个是利益相关者的优先级，另外是技术开发者察觉到的难度
    采用Risk Matrix 方法
(2) 选择并运用一组技术
(3) 评估风险降低的程度

[J3.3] Risk
Risk = 失败概率 * 失败影响    (觉察到的)

如何建立风险评估系统, e.g.
项目管理风险：
    首席开发者出了车祸
    不理解客户需求
    高级副总裁讨厌我们的经理
软件工程风险：
    服务器无法扩展到1000名用户的规模
    响应消息的解析可能存在缺陷
    
必须要细化、量化的描述风险，才能更好的评估风险：
e.g. 当负载达到峰值时，网页打开延迟超过5秒