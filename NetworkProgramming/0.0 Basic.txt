1 nibble = 4 bits
1 byte = 2 nibble = 8 bits
1 word = DataBus = 16(in-16bit-sys)    32(in-32bit-sys)   64(in-64bit-sys)

|~ Endianness ~|
/**
 * Endianness is depended on CPU. It determines the memory to store int.
 */
e.g. 0x11223344
LE(little endian): [0x7f..a0 | 44] [0x7f..a8 | 33] [0x7f..b0 | 22] [0x7f..b8 | 11]
BE(big endian): [0x7f..a0 | 11] [0x7f..a8 | 22] [0x7f..b0 | 33] [0x7f..b8 | 44]
|[
unsigned short sterilize = 0x0102; // [0000 0001 | 0000 0010] or [0000 0010 | 0000 0001] in 64bit OS
char * interpreter = reinterpret_cast<char *>(&i);      // [0000 0001 |] or [[0000 0010 |], 1 or 2
bool is_be =  1 ==  reinterpret_cast<int>(*interpreter);     // 1 or 2
]|
|+ Network Endianness +|
/**
 * Network Endianness is always BE. So we need to convert host endianness into BE
 * [ 00000000 | 00000000 | 00000000 | 00000000 ]
 */
hton?: convert unsigned ? from host endianness(LE or BE) to network endianness (BE)
uint16_t htons()   /    uint32_t htonl()
ntoh?: convert unsigned ? from BE to host endianness (LE or BE)
ntohs / ntohl

|~ Byte Manipulation[mə'nɪpjəleɪʃn] ~|
#include <string.h>
/**
 * byte zero
 * void bzero(void *dest, size_t nbytes);
 */
void * memset(void * dest, int c, size_t nbytes)

/**
 * void bcopy(const void *src, void *dest, size_t nbytes)
 */
void *memcpy(void * dest, const void *src, size_t nbytes);

/**
 * int bcmp(const void *ptr1, const void *ptr12, size_t nbytes);
 * @return int 0 if equal, nonzero if unequal
 */
int memcmp(const void *ptr1, const void *ptr2, size_t nbytes);

|~ ~|
#include <arpa/inet.h>
/**
 * Presentation to numeric: Convert IP addr. from 'Dotted Decimal Notation' to Binary, 
   and assign to 'in_addr' or 'in6_addr' struct
 * dst_strct: 'in_addr' or 'in6_addr' struct , depended on VinceAddrFamily
 * @argument const char * ip_str INADDR_ANY indicates all IP
 */

int inet_pton(sa_family_t VinceAddrFamily, const char *ip_str, void *dst_struct)
/**
 * @return object ptr to result if OK, NULL on error
 */

#define INET_ADDR_STRLEN    16  /* for IPv4 dotted-decimal */
#define INET6_ADDR_STRLEN   46  /* for IPv6 hex string */
const char * inet_ntop(sa_family_t VinceAddrFamily, const void *addr, char *str, size_t sizeof(str));