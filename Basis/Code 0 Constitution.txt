|+ Abbreviation +|
[fn] function : accepted in keyboard

|+ Doc maker +|
/**
 * @var   --> @field  @constant  @define
 * @arg   --> @argument/@param
 * @arg/return  --> value-result
 * @return  --> @returns
 * @throw  
 * @todo
 * @see   --> @link @tutorial
 * @author
 * @version
 * @example
 * @extends --> @derive
 * @note  -->  @note   @remind @note     
 * int array bool string
 
 *******************************
 * @alias Treat a member as if it had a different name.
 * 
 */
|[

char leadPoisoning(int &value_result){
}

int fart = 5;               // @var
#define profound 100        // @var  --> @define
const int markdown = 10;    // @var  --> @constant

enum fuzzy{
  PERHAPS,    // @var   --> @constant
};
union recipe{
  size_t cuisine;         // @var  --> @field
};

]|


|+ Standard Operator Precedence[ˈprɛsɪdəns] +|
/**
 * @see http://php.net/manual/en/language.operators.precedence.php
 * @see http://en.cppreference.com/w/cpp/language/operator_precedence
 * @see http://en.cppreference.com/w/c/language/operator_precedence
 */

+------------------------------------------------------------------------------+
|L| X++ X-- type()  Cls.prop ClsPtr->prop  
+------------------------------------------------------------------------------+
|R| !(logic NOT) ~(bitwise NOT)
|R| *(ptr)  &(address-of)
+------------------------------------------------------------------------------+
|R| * / %
|R| +(Addition) -(substraction)
|R| << >>
|L| <  >  <=  >=
| | ==  !==   ===  !==
|L| &(bitwise AND)
|L| ^
|L| |
|L| &&
|L| ||
| | ?:
|R| = 
|R| +=  -= 
|R| *=  /=  .=  %= 
|R| <<=  >>= 
|R| &= |= ^=
|L| ,
+------------------------------------------------------------------------------+ 
 
|+ Set Tab 2 spaces length +|
|- Pros -|
Facebook sets it 1 space; Google sets it 2 spaces;
4 spaces is not good for doc commentary. 1 is so short;
|- Cons -|
Others set it 4 spaces

|+ Only class's brace turn to next line +|
|[
class Sewer: public Drain,
             public Drainage
{
  int sewage;
  public:
  void Sewerage();
}

class Constitution extends Constituency
                   implement Constituent
{
  
}
]|


|+ Use prefix form (++i/--i) rather than (i++/i--) +|
|[
const char * suck = "sucker";
int rear;
for(rear = 0; *(suck++); ++rear)
  printf("%d,%c", rear, *suck);   // [s]  0,u  1,c  2,k  3,e  4,r  5,'\0'
printf("%d", rear); // 6   and now suck is in the addr. after '\0'
suck -= rear + 1;   // *(suck) = s
for(read = r; *(++suck); ++rear)
  printf("%d,%c", rear, *suck);   // [s]  0,u  1,c  2,k  3,e  4,r
printf("%d", rear); // 5  and now suck is in addr. '\0'
suck -= rear + 1;   // *(suck) = s
]|
|- Pros -|
In PHP and C++, when the return value is ignored, (++i/--i) is more efficient.
This is because (i++) requires a copy of i to be made. Especially it's an iterator.

|+ Declaration Order: variables, methods; private, protected, public +|
Use the specified order of declarations within a class: private protected public; data  members (variables) before methods.
|- Pros -|
It's accepted in Facebook and it's more human readable.
|- Cons -|
It's contrary to Google C++ Guider "Declaration Order".
